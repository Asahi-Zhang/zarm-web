(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{180:function(n,t,e){"use strict";e(72)},182:function(n,t,e){"use strict";var o=e(183),i=e.n(o),a=e(188),l=e.n(a),s=e(189),r=e.n(s),c=e(190),u=e.n(c),d=e(24),m=e.n(d),h=e(20),p=e.n(h),g=e(21),v=e.n(g),f=e(22),M=e.n(f),y=e(23),B=e.n(y),k=e(0),b=e.n(k),C=e(48),E=e.n(C),w=e(181),_=e.n(w),L=e(191),N=e.n(L),V=e(186),D=e.n(V),T=e(25),S=e.n(T),F=e(192),H=e(1),I=e.n(H),R=e(187),U=e.n(R),x=(e(193),e(194),e(195),e(196),e(197),function(n){function t(){return p()(this,t),M()(this,(t.__proto__||m()(t)).apply(this,arguments))}return B()(t,n),v()(t,[{key:"componentDidMount",value:function(){var n=this,t=this.props,e=t.onChange,o=t.value;this.cm=U()(this.editor,{mode:"jsx",theme:"react",keyMap:"sublime",viewportMargin:1/0,lineNumbers:!1,dragDrop:!1}),this.cm.setValue(o),this.cm.on("changes",function(t){e&&(clearTimeout(n.timeout),n.timeout=setTimeout(function(){e(t.getValue())},300))})}},{key:"render",value:function(){var n=this;return b.a.createElement("div",{className:"editor",ref:function(t){n.editor=t}})}}]),t}(k.Component)),z=x;x.propTypes={onChange:I.a.func,value:I.a.string},x.defaultProps={onChange:function(){},value:""};var A=function(n){function t(n){p()(this,t);var e=M()(this,(t.__proto__||m()(t)).call(this,n));return e.playerElem=null,e.playerId=""+parseInt(1e9*Math.random(),10).toString(36),e.document=e.props.children.match(/([^]*)\n?(```[^]+```)/),e.description=_()(e.document[1]),e.source=e.document[2].match(/```(.*)\n?([^]+)```/),e.state={showBlock:!1},e.blockControl=e.blockControl.bind(e),e}return B()(t,n),v()(t,[{key:"componentDidMount",value:function(){this.renderSource(this.source[2])}},{key:"componentWillUnmount",value:function(){this.playerElem&&E.a.unmountComponentAtNode(this.playerElem)}},{key:"blockControl",value:function(){this.setState({showBlock:!this.state.showBlock})}},{key:"renderSource",value:function(n){var t=this;Promise.all([e.e(49),e.e(3),e.e(47)]).then(e.bind(null,399)).then(function(n){var e=["context","React","ReactDOM"],o=[t,b.a,E.a];return S()(n).forEach(function(t){e.push(t),o.push(n[t])}),{args:e,argv:o}}).then(function(e){var o=e.args,i=e.argv,a=Object(F.transform)("\n        class Demo extends React.Component {\n          "+n+"\n        }\n\n        if(!window.playerList){\n            window.playerList = [];\n        }\n        const container = document.getElementById('"+t.playerId+"');\n        window.playerList.push(container);\n\n        ReactDOM.render(<Demo {...context.props} />, container)\n      ",{presets:["es2015","react"]}).code;o.push(a),(new(Function.prototype.bind.apply(Function,[null].concat(D()(o))))).apply(void 0,D()(i)),t.source[2]=n}).catch(function(n){0})}},{key:"render",value:function(){var n=this;return b.a.createElement("div",{className:"demo-block demo-box demo-"+this.props.name},b.a.createElement("div",{className:"source",id:this.playerId,ref:function(t){n.playerElem=t}}),this.state.showBlock&&b.a.createElement("div",{className:"meta"},this.description&&b.a.createElement("div",{className:"description",dangerouslySetInnerHTML:{__html:this.description}}),b.a.createElement(z,{value:this.source[2],onChange:function(t){return n.renderSource(t)}})),b.a.createElement("div",{className:"demo-block-control",onClick:this.blockControl},this.state.showBlock?b.a.createElement("span",null,b.a.createElement("i",{className:"el-icon-caret-top"}),"隐藏"):b.a.createElement("span",null,b.a.createElement("i",{className:"el-icon-caret-bottom"}),"展开")))}}]),t}(b.a.Component),j=function(n){function t(n){p()(this,t);var e=M()(this,(t.__proto__||m()(t)).call(this,n));return e.divList=[],e.components=new u.a,e.renderer=new _.a.Renderer,e.renderer.table=function(n,t){return'<table class="grid"><thead>'+n+"</thead><tbody>"+t+"</tbody></table>"},e}return B()(t,n),v()(t,[{key:"componentDidMount",value:function(){this.renderDOM()}},{key:"componentDidUpdate",value:function(){}},{key:"componentWillUnmount",value:function(){this.divList.forEach(function(n){E.a.unmountComponentAtNode(n),n.parentNode.removeChild(n)}),this.divList=[]}},{key:"renderDOM",value:function(){var n=!0,t=!1,e=void 0;try{for(var o,i=l()(this.components);!(n=(o=i.next()).done);n=!0){var a=o.value,s=r()(a,2),c=s[0],u=s[1],d=document.getElementById(c);this.divList.push(d),d instanceof HTMLElement&&E.a.render(u,d)}}catch(n){t=!0,e=n}finally{try{!n&&i.return&&i.return()}finally{if(t)throw e}}N.a.highlightAll()}},{key:"render",value:function(){var n=this,t=this.document(localStorage.getItem("ELEMENT_LANGUAGE")||"zh-CN");if("string"==typeof t){this.components.clear();var e=_()(t.replace(/:::\s?demo\s?([^]+?):::/g,function(t,e,o){var a=o.toString(36);return n.components.set(a,b.a.createElement(A,i()({name:n.constructor.name.toLowerCase()},n.props),e)),"<div id="+a+"></div>"}),{renderer:this.renderer});return b.a.createElement("div",{dangerouslySetInnerHTML:{__html:e}})}return b.a.createElement("span",null)}}]),t}(b.a.Component);t.a=j},185:function(n,t,e){"use strict";e(180),e(199)},198:function(n,t,e){"use strict";e(180),e(185),e(203)},234:function(n,t,e){"use strict";e(180),e(235)},235:function(n,t,e){},345:function(n,t){n.exports="## Modal 模态框\n在当前页面打开一个模态对话框。\n\n### 基础用法\n\nModal组件的基础用法。\n\n:::demo 可以通过`Modal.Header`,`Modal.Body`,`Modal.Footer`子组件定义模态框的不同部分。\n\n```js\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false\n    };\n  }\n  toggleModal() {\n    this.setState({\n      modalVisible: !this.state.modalVisible\n    });\n  }\n  render() {\n    const { modalVisible } = this.state;\n    return (\n      <div>\n        <Button theme=\"info\" onClick={() => this.toggleModal()}>展示模态框</Button>\n        <Modal visible={modalVisible}>\n          <Modal.Header title=\"标题\" onClose={() => this.toggleModal()} />\n          <Modal.Body className=\"test\">\n            我是模态框\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => this.toggleModal()}>取消</Button>\n            <Button theme=\"success\" onClick={() => { alert('你点击了确定') }}>确定</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n```\n:::\n\n### 不同的动画\n\n支持多种展示动画。\n\n:::demo 可以通过`animationType`属性设置不同的动画方式，默认`zoom`。\n\n```js\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      animationType: 'zoom'\n    };\n  }\n  toggleModal(animationType) {\n    this.setState({\n      modalVisible: !this.state.modalVisible,\n      animationType\n    });\n  }\n  render() {\n    const { modalVisible, animationType } = this.state;\n    return (\n      <div className=\"buttons\">\n        <Button onClick={() => this.toggleModal('zoom')}>zoom</Button>\n        <Button onClick={() => this.toggleModal('door')}>door</Button>\n        <Button onClick={() => this.toggleModal('flip')}>flip</Button>\n        <Button onClick={() => this.toggleModal('rotate')}>rotate</Button>\n        <Button onClick={() => this.toggleModal('slideUp')}>slideUp</Button>\n        <Button onClick={() => this.toggleModal('slideDown')}>slideDown</Button>\n        <Button onClick={() => this.toggleModal('slideLeft')}>slideLeft</Button>\n        <Button onClick={() => this.toggleModal('slideRight')}>slideRight</Button>\n        <Button onClick={() => this.toggleModal('moveUp')}>moveUp</Button>\n        <Button onClick={() => this.toggleModal('moveDown')}>moveDown</Button>\n        <Button onClick={() => this.toggleModal('moveLeft')}>moveLeft</Button>\n        <Button onClick={() => this.toggleModal('moveRight')}>moveRight</Button>\n        <Modal visible={modalVisible} animationType={animationType}>\n          <Modal.Header title=\"标题\" onClose={() => this.toggleModal()} />\n          <Modal.Body>\n            我是一个模态框\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => this.toggleModal()}>取消</Button>\n            <Button theme=\"success\" onClick={() => { alert('你点击了确定') }}>确定</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n```\n:::\n\n### 圆角模态框\n\n可以设置圆角模态框。\n\n:::demo 使用`radius`属性设置圆角\n\n```js\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false\n    };\n  }\n  toggleModal() {\n    this.setState({\n      modalVisible: !this.state.modalVisible\n    });\n  }\n  render() {\n    const { modalVisible } = this.state;\n    return (\n      <div>\n        <Button theme=\"info\" onClick={() => this.toggleModal()}>圆角模态框</Button>\n        <Modal visible={modalVisible} radius>\n          <Modal.Header title=\"标题\" onClose={() => this.toggleModal()} />\n          <Modal.Body>\n            我是一个模态框\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => this.toggleModal()}>取消</Button>\n            <Button theme=\"success\" onClick={() => { alert('你点击了确定') }}>确定</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n```\n:::\n\n\n### Modal Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| visible    | 是否可见  | boolean  |   -            |    false     |\n| width     | 宽度   | number  |   -            |    600     |\n| radius     | 是否圆角   | boolean    | - | false   |\n| animationType     | 动画方式  | string    | zoom,door,flip... | zoom   |\n| animationDuration     | 动画时长(ms)  | number   | - | 300  |\n\n\n### Modal Events\n| 事件名称 | 说明 | 回调参数 |\n|---------- |-------- |---------- |\n| onMaskClick | 点击遮罩触发的事件 | — |\n\n\n### Modal.Header Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| title    | 标题  | string  |   -            |    ''     |\n\n### Modal.Header Events\n| 事件名称 | 说明 | 回调参数 |\n|---------- |-------- |---------- |\n| onClose | 点击关闭图标触发的事件 | — |"},95:function(n,t,e){"use strict";e.r(t);var o=e(24),i=e.n(o),a=e(20),l=e.n(a),s=e(21),r=e.n(s),c=e(22),u=e.n(c),d=e(23),m=e.n(d),h=e(182),p=(e(234),e(198),function(n){function t(){return l()(this,t),u()(this,(t.__proto__||i()(t)).apply(this,arguments))}return m()(t,n),r()(t,[{key:"document",value:function(){return e(345)}}]),t}(h.a));t.default=p}}]);