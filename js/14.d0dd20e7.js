webpackJsonp([14],{153:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var l=t(65),a=t.n(l),i=t(66),s=t.n(i),c=t(67),u=t.n(c),o=t(68),r=t.n(o),S=t(69),d=t.n(S),h=t(265),p=(t(293),function(e){function n(){return s()(this,n),r()(this,(n.__proto__||a()(n)).apply(this,arguments))}return d()(n,e),u()(n,[{key:"document",value:function(){return t(469)}}]),n}(h.a));n.default=p},293:function(e,n,t){"use strict";var l=(t(288),t(275),t(294));t.n(l)},294:function(e,n){},469:function(e,n){e.exports='## Select 选择器\n\n常用的下拉选择器。\n\n### 基础用法\n\n最简单的选择器。\n\n:::demo 通过`value`设置值，通过`onChange`来监听值的变化。\n\n```js\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectValue: \'\'\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Select\n          placeholder="请选择"\n          style={{ width: 200 }}\n          value={this.state.selectValue}\n          onChange={(data) => {\n            console.log(data);\n            this.setState({\n              selectValue : data.value,\n            });\n        }}>\n          <Select.Option value="a">我是A</Select.Option>\n          <Select.Option value="b" disabled>我是B</Select.Option>\n          <Select.Option value="c">我是C</Select.Option>\n          <Select.Option value="d">我是D</Select.Option>\n        </Select>\n      </div>\n    )\n  }\n```\n:::\n\n### 是否禁用\n\n添加`disabled`属性即可禁用。\n\n:::demo\n\n```js\n  render() {\n    return (\n      <div>\n        <Select\n          disabled\n          style={{ width: 200 }}\n          value="a"\n        >\n          <Select.Option value="a">我是A</Select.Option>\n          <Select.Option value="b" disabled>我是B</Select.Option>\n          <Select.Option value="c">我是C</Select.Option>\n          <Select.Option value="d">我是D</Select.Option>\n        </Select>\n      </div>\n    )\n  }\n```\n:::\n\n### 带搜索框\n\n支持输入框搜索选项。\n\n:::demo 添加`search`属性，通过`onSearchChange`监听输入框值的变化。\n\n```js\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectValue: \'\'\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Select\n          search\n          value={this.state.selectValue}\n          style={{ width: 200 }}\n          placeholder="请选择"\n          searchPlaceholder="输入关键字"\n          onSearchChange={(value) => {\n            console.log(value)\n          }}\n          onChange={(data) => {\n            this.setState({\n              selectValue: data.value\n            });\n          }}>\n          <Select.Option value="a">我是A</Select.Option>\n          <Select.Option value="b">我是B</Select.Option>\n          <Select.Option value="c">我是C</Select.Option>\n          <Select.Option value="d">我是D</Select.Option>\n        </Select>\n      </div>\n    )\n  }\n```\n:::\n\n\n### 更多设置\n\n通过`radius`设置圆角。\n\n:::demo\n\n```js\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectValue: \'\'\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Select\n          radius\n          value={this.state.selectValue}\n          style={{ width: 200 }}\n          placeholder="请选择"\n          searchPlaceholder="输入关键字"\n          onChange={(data) => {\n            this.setState({\n              selectValue: data.value\n            });\n          }}>\n          <Select.Option value="a">我是A</Select.Option>\n          <Select.Option value="b">我是B</Select.Option>\n          <Select.Option value="c">我是C</Select.Option>\n          <Select.Option value="d">我是D</Select.Option>\n        </Select>\n      </div>\n    )\n  }\n```\n:::\n\n### 多选穿梭框\n\n使用`Select.Multiple`实现。\n\n:::demo\n\n```js\n  constructor(props) {\n    super(props)\n    this.state = {\n      mulSelectLeft: [\n        {value: 1, name: \'我是选项一\'},\n        {value: 2, name: \'我是选项二\'},\n        {value: 3, name: \'我是选项三\'},\n        {value: 4, name: \'我是选项四\'},\n      ],\n      mulSelectLeftValue: [],\n      mulSelectRight: [],\n      mulSelectRightValue: [],\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Select.Multiple\n          style={{ width: 200, height: 200 }}\n          value={this.state.mulSelectLeftValue}\n          onChange={(selectedRows, row) => {\n            this.setState({ mulSelectLeftValue: selectedRows });\n          }}\n        >\n          {\n            this.state.mulSelectLeft.map((option, index) => {\n              return <Select.Option key={index} value={option.value}>{option.name}</Select.Option>\n            })\n          }\n        </Select.Multiple>\n\n        <span style={{margin: \'-10px 10px 0 10px\', textAlign: \'center\', verticalAlign: \'middle\', display: \'inline-block\'}}>\n          <Button\n            radius\n            style={{float: \'left\', clear: \'both\'}}\n            isDisabled={this.state.mulSelectLeftValue.length == 0}\n            onClick={() => {\n              const mulSelectLeft = [...this.state.mulSelectLeft].filter(item => (this.state.mulSelectLeftValue.indexOf(item.value) < 0) && item);\n              let selected = [...this.state.mulSelectLeft].filter(item => (this.state.mulSelectLeftValue.indexOf(item.value) > -1) && item);\n              let mulSelectRight = this.state.mulSelectRight.concat(selected);\n              this.setState({\n                mulSelectLeft,\n                mulSelectRight,\n                mulSelectLeftValue: [],\n                mulSelectRightValue: []\n            });\n          }}><Icon type="add" /></Button>\n          <Button\n            radius\n            style={{float: \'left\', clear: \'both\', marginTop: 10}}\n            isDisabled={this.state.mulSelectRightValue.length == 0}\n            onClick={()=> {\n              const mulSelectRight = [...this.state.mulSelectRight].filter(item => (this.state.mulSelectRightValue.indexOf(item.value) < 0) && item);\n              let selected = [...this.state.mulSelectRight].filter(item => (this.state.mulSelectRightValue.indexOf(item.value) > -1) && item);\n              let mulSelectLeft = this.state.mulSelectLeft.concat(selected);\n              this.setState({\n                mulSelectLeft,\n                mulSelectRight,\n                mulSelectLeftValue: [],\n                mulSelectRightValue: []\n            });\n          }}><Icon type="minus" /></Button>\n        </span>\n\n        <Select.Multiple\n          style={{width: 200, height: 200}}\n          value={this.state.mulSelectRightValue}\n          onChange={(selectedRows, row) => {\n            this.setState({ mulSelectRightValue: selectedRows });\n          }}\n        >\n          {\n            this.state.mulSelectRight.map((option, index) => {\n              return <Select.Option key={index} value={option.value}>{option.name}</Select.Option>\n            })\n          }\n        </Select.Multiple>\n      </div>\n    )\n  }\n```\n:::\n\n### Select Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value     | 选中值   | string |   -            |    -   |\n| defaultValue     | 默认选中值   | string  |   - |     1  |\n| radius     | 是否圆角   | boolean   | — | false  |\n| search     | 是否支持搜索   | boolean    | — | false   |\n| disabled     | 是否禁用   | boolean   | — | false  |\n\n\n### Select Events\n| 事件名称 | 说明 | 回调参数 |\n|---------- |-------- |---------- |\n| onChange | 选项变更时候触发的事件 |  { index, value, text }|\n| onSearchChange | 搜索框值变更触发的事件 | searchValue |\n\n\n### Select.Multiple Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value     | 选中值   | string |   -            |    -   |\n| defaultValue     | 默认选中值   | string  |   - |     1  |\n| radius     | 是否圆角   | boolean   | — | false  |\n| disabled     | 是否禁用   | boolean   | — | false  |\n\n### Select Events\n| 事件名称 | 说明 | 回调参数 |\n|---------- |-------- |---------- |\n| onChange | 选项变更时候触发的事件 |  { index, value, text }|\n| onDoubleClick | 双击选项触发的事件 | searchValue |\n\n\n### Option Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| checked     | 是否选中   | boolean   | — | false  |\n| disabled     | 是否禁用   | boolean   | — | false  |'}});